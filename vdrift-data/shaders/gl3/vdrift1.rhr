passList
{
  *item
  {
    name = track opaque
    clearColor = 1
    clearDepth = 1
    clearStencil = 1
    drawGroups
    {
      *item = normal_noblend
    }
    userDefinedFields
    {
      *key = camera
      *value = default
    }
    vertexShader = simple.vert
    vertexShaderDefines
    {
    }
    fragmentShader = gbufferfill.frag
    fragmentShaderDefines
    {
    }
    shaderAttributeBindings
    {
      *item = vertexPosition
      *item = vertexNormal
      *item = vertexTangent
      *item = vertexBitangent
      *item = vertexColor
      *item = vertexUv0
      *item = vertexUv1
      *item = vertexUv2
    }
    uniforms
    {
      *key = depthOffset
      *value
      {
        data
        {
          *item = 0.00000000000000000000e+00
        }
      }
      *key = modelMatrix
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = projectionMatrix
      *value
      {
        data
        {
          *item = 1.87397003173828125000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 2.41421365737915039062e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -1.00200200080871582031e+00
          *item = -1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -2.00200200080871582031e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = viewMatrix
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -5.83815002441406250000e+00
          *item = 1.00000000000000000000e+00
        }
      }
    }
    stateEnable
    {
      *item = GL_CULL_FACE
      *item = GL_DEPTH_TEST
      *item = GL_FRAMEBUFFER_SRGB
    }
    stateDisable
    {
      *item = GL_POLYGON_OFFSET_FILL
      *item = GL_POLYGON_OFFSET_LINE
      *item = GL_POLYGON_OFFSET_POINT
      *item = GL_SAMPLE_ALPHA_TO_COVERAGE
      *item = GL_SAMPLE_ALPHA_TO_ONE
      *item = GL_SAMPLE_COVERAGE
      *item = GL_SAMPLE_MASK
    }
    stateEnablei
    {
    }
    stateDisablei
    {
      *item
      {
        *first = GL_BLEND
        *second = 0
      }
      *item
      {
        *first = GL_BLEND
        *second = 1
      }
      *item
      {
        *first = GL_BLEND
        *second = 2
      }
      *item
      {
        *first = GL_BLEND
        *second = 3
      }
    }
    stateEnum
    {
      *key = GL_CULL_FACE_MODE
      *value
      {
        type = enum
        enumdata = GL_BACK
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_DEPTH_FUNC
      *value
      {
        type = enum
        enumdata = GL_LEQUAL
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_DEPTH_WRITEMASK
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 1
        }
        floatdata
        {
        }
      }
      *key = GL_POLYGON_OFFSET_FACTOR
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_COVERAGE_VALUE
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_MASK_VALUE
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 0
        }
        floatdata
        {
        }
      }
    }
    renderTargets
    {
      *key = GL_COLOR_ATTACHMENT0
      *value
      {
        name = gbuffer: material properties
        variable = materialProperties
        format = GL_RGBA8
        target = GL_TEXTURE_2D
        autoMipmap = 0
        width = 1.00000000000000000000e+00
        height = 1.00000000000000000000e+00
        widthHeightAreMultiples = 1
      }
      *key = GL_COLOR_ATTACHMENT1
      *value
      {
        name = gbuffer: normal xy
        variable = normalXY
        format = GL_RGBA8
        target = GL_TEXTURE_2D
        autoMipmap = 0
        width = 1.00000000000000000000e+00
        height = 1.00000000000000000000e+00
        widthHeightAreMultiples = 1
      }
      *key = GL_COLOR_ATTACHMENT2
      *value
      {
        name = gbuffer: diffuse albedo
        variable = diffuseAlbedo
        format = GL_SRGB8_ALPHA8
        target = GL_TEXTURE_2D
        autoMipmap = 0
        width = 1.00000000000000000000e+00
        height = 1.00000000000000000000e+00
        widthHeightAreMultiples = 1
      }
      *key = GL_DEPTH_ATTACHMENT
      *value
      {
        name = gbuffer: depth
        variable = depth
        format = GL_DEPTH_COMPONENT24
        target = GL_TEXTURE_2D
        autoMipmap = 0
        width = 1.00000000000000000000e+00
        height = 1.00000000000000000000e+00
        widthHeightAreMultiples = 1
      }
    }
    samplers
    {
      *key = diffuseSampler
      *value
      {
        textureName = diffuseTexture
        state
        {
          *key = GL_TEXTURE_BORDER_COLOR
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_LOD_BIAS
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAG_FILTER
          *value
          {
            type = enum
            enumdata = GL_LINEAR
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MAX_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_MIN_FILTER
          *value
          {
            type = enum
            enumdata = GL_LINEAR_MIPMAP_LINEAR
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MIN_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = -1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_WRAP_R
          *value
          {
            type = enum
            enumdata = GL_REPEAT
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_S
          *value
          {
            type = enum
            enumdata = GL_REPEAT
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_T
          *value
          {
            type = enum
            enumdata = GL_REPEAT
            intdata
            {
            }
            floatdata
            {
            }
          }
        }
      }
      *key = materialPropertiesSampler
      *value
      {
        textureName = misc1Texture
        state
        {
          *key = GL_TEXTURE_BORDER_COLOR
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_LOD_BIAS
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAG_FILTER
          *value
          {
            type = enum
            enumdata = GL_LINEAR
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MAX_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_MIN_FILTER
          *value
          {
            type = enum
            enumdata = GL_LINEAR
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MIN_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = -1.00000000000000000000e+03
            }
          }
        }
      }
    }
  }
  *item
  {
    name = car opaque
    clearColor = 0
    clearDepth = 0
    clearStencil = 0
    drawGroups
    {
      *item = car_noblend
    }
    userDefinedFields
    {
      *key = camera
      *value = default
    }
    vertexShader = simple.vert
    vertexShaderDefines
    {
    }
    fragmentShader = gbufferfill.frag
    fragmentShaderDefines
    {
      *item = CARPAINT
    }
    shaderAttributeBindings
    {
      *item = vertexPosition
      *item = vertexNormal
      *item = vertexTangent
      *item = vertexBitangent
      *item = vertexColor
      *item = vertexUv0
      *item = vertexUv1
      *item = vertexUv2
    }
    uniforms
    {
      *key = colorTint
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = modelMatrix
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = projectionMatrix
      *value
      {
        data
        {
          *item = 1.87397003173828125000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 2.41421365737915039062e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -1.00200200080871582031e+00
          *item = -1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -2.00200200080871582031e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = viewMatrix
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -5.83815002441406250000e+00
          *item = 1.00000000000000000000e+00
        }
      }
    }
    stateEnable
    {
      *item = GL_DEPTH_TEST
      *item = GL_FRAMEBUFFER_SRGB
    }
    stateDisable
    {
      *item = GL_CULL_FACE
      *item = GL_POLYGON_OFFSET_FILL
      *item = GL_POLYGON_OFFSET_LINE
      *item = GL_POLYGON_OFFSET_POINT
      *item = GL_SAMPLE_ALPHA_TO_COVERAGE
      *item = GL_SAMPLE_ALPHA_TO_ONE
      *item = GL_SAMPLE_COVERAGE
      *item = GL_SAMPLE_MASK
    }
    stateEnablei
    {
    }
    stateDisablei
    {
      *item
      {
        *first = GL_BLEND
        *second = 0
      }
      *item
      {
        *first = GL_BLEND
        *second = 1
      }
      *item
      {
        *first = GL_BLEND
        *second = 2
      }
      *item
      {
        *first = GL_BLEND
        *second = 3
      }
    }
    stateEnum
    {
      *key = GL_CULL_FACE_MODE
      *value
      {
        type = enum
        enumdata = GL_BACK
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_DEPTH_FUNC
      *value
      {
        type = enum
        enumdata = GL_LEQUAL
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_DEPTH_WRITEMASK
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 1
        }
        floatdata
        {
        }
      }
      *key = GL_POLYGON_OFFSET_FACTOR
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_COVERAGE_VALUE
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_MASK_VALUE
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 0
        }
        floatdata
        {
        }
      }
    }
    renderTargets
    {
      *key = GL_COLOR_ATTACHMENT0
      *value
      {
        name = gbuffer: material properties
        variable = materialProperties
        format = GL_RGBA8
        target = GL_TEXTURE_2D
        autoMipmap = 0
        width = 1.00000000000000000000e+00
        height = 1.00000000000000000000e+00
        widthHeightAreMultiples = 1
      }
      *key = GL_COLOR_ATTACHMENT1
      *value
      {
        name = gbuffer: normal xy
        variable = normalXY
        format = GL_RGBA8
        target = GL_TEXTURE_2D
        autoMipmap = 0
        width = 1.00000000000000000000e+00
        height = 1.00000000000000000000e+00
        widthHeightAreMultiples = 1
      }
      *key = GL_COLOR_ATTACHMENT2
      *value
      {
        name = gbuffer: diffuse albedo
        variable = diffuseAlbedo
        format = GL_SRGB8_ALPHA8
        target = GL_TEXTURE_2D
        autoMipmap = 0
        width = 1.00000000000000000000e+00
        height = 1.00000000000000000000e+00
        widthHeightAreMultiples = 1
      }
      *key = GL_DEPTH_ATTACHMENT
      *value
      {
        name = gbuffer: depth
        variable = depth
        format = GL_DEPTH_COMPONENT24
        target = GL_TEXTURE_2D
        autoMipmap = 0
        width = 1.00000000000000000000e+00
        height = 1.00000000000000000000e+00
        widthHeightAreMultiples = 1
      }
    }
    samplers
    {
      *key = diffuseSampler
      *value
      {
        textureName = diffuseTexture
        state
        {
          *key = GL_TEXTURE_BORDER_COLOR
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_LOD_BIAS
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAG_FILTER
          *value
          {
            type = enum
            enumdata = GL_LINEAR
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MAX_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_MIN_FILTER
          *value
          {
            type = enum
            enumdata = GL_LINEAR_MIPMAP_LINEAR
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MIN_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = -1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_WRAP_R
          *value
          {
            type = enum
            enumdata = GL_REPEAT
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_S
          *value
          {
            type = enum
            enumdata = GL_REPEAT
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_T
          *value
          {
            type = enum
            enumdata = GL_REPEAT
            intdata
            {
            }
            floatdata
            {
            }
          }
        }
      }
      *key = materialPropertiesSampler
      *value
      {
        textureName = misc1Texture
        state
        {
          *key = GL_TEXTURE_BORDER_COLOR
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_LOD_BIAS
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAG_FILTER
          *value
          {
            type = enum
            enumdata = GL_LINEAR
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MAX_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_MIN_FILTER
          *value
          {
            type = enum
            enumdata = GL_LINEAR
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MIN_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = -1.00000000000000000000e+03
            }
          }
        }
      }
    }
  }
  *item
  {
    name = depth copy
    clearColor = 1
    clearDepth = 1
    clearStencil = 1
    drawGroups
    {
      *item = full screen rect
    }
    userDefinedFields
    {
    }
    vertexShader = simple.vert
    vertexShaderDefines
    {
    }
    fragmentShader = depthcopy.frag
    fragmentShaderDefines
    {
    }
    shaderAttributeBindings
    {
      *item = vertexPosition
      *item = vertexNormal
      *item = vertexTangent
      *item = vertexBitangent
      *item = vertexColor
      *item = vertexUv0
      *item = vertexUv1
      *item = vertexUv2
    }
    uniforms
    {
      *key = modelMatrix
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = projectionMatrix
      *value
      {
        data
        {
          *item = 2.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -2.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = -0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = viewMatrix
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = viewportSize
      *value
      {
        data
        {
          *item = 7.15000000000000000000e+02
          *item = 5.55000000000000000000e+02
        }
      }
    }
    stateEnable
    {
      *item = GL_DEPTH_TEST
    }
    stateDisable
    {
      *item = GL_CULL_FACE
      *item = GL_FRAMEBUFFER_SRGB
      *item = GL_POLYGON_OFFSET_FILL
      *item = GL_POLYGON_OFFSET_LINE
      *item = GL_POLYGON_OFFSET_POINT
      *item = GL_SAMPLE_ALPHA_TO_COVERAGE
      *item = GL_SAMPLE_ALPHA_TO_ONE
      *item = GL_SAMPLE_COVERAGE
      *item = GL_SAMPLE_MASK
    }
    stateEnablei
    {
    }
    stateDisablei
    {
      *item
      {
        *first = GL_BLEND
        *second = 0
      }
      *item
      {
        *first = GL_BLEND
        *second = 1
      }
      *item
      {
        *first = GL_BLEND
        *second = 2
      }
      *item
      {
        *first = GL_BLEND
        *second = 3
      }
    }
    stateEnum
    {
      *key = GL_BLEND_DST_ALPHA
      *value
      {
        type = enum
        enumdata = GL_ONE_MINUS_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_DST_RGB
      *value
      {
        type = enum
        enumdata = GL_ONE_MINUS_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_EQUATION_ALPHA
      *value
      {
        type = enum
        enumdata = GL_FUNC_ADD
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_EQUATION_RGB
      *value
      {
        type = enum
        enumdata = GL_FUNC_ADD
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_SRC_ALPHA
      *value
      {
        type = enum
        enumdata = GL_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_SRC_RGB
      *value
      {
        type = enum
        enumdata = GL_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_DEPTH_FUNC
      *value
      {
        type = enum
        enumdata = GL_ALWAYS
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_DEPTH_WRITEMASK
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 1
        }
        floatdata
        {
        }
      }
      *key = GL_POLYGON_OFFSET_FACTOR
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_COVERAGE_VALUE
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_MASK_VALUE
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 0
        }
        floatdata
        {
        }
      }
    }
    renderTargets
    {
      *key = GL_DEPTH_ATTACHMENT
      *value
      {
        name = depth copy
        variable = depthOut
        format = GL_DEPTH_COMPONENT24
        target = GL_TEXTURE_2D
        autoMipmap = 0
        width = 1.00000000000000000000e+00
        height = 1.00000000000000000000e+00
        widthHeightAreMultiples = 1
      }
    }
    samplers
    {
      *key = depthSampler
      *value
      {
        textureName = gbuffer: depth
        state
        {
          *key = GL_TEXTURE_BORDER_COLOR
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_LOD_BIAS
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAG_FILTER
          *value
          {
            type = enum
            enumdata = GL_NEAREST
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MAX_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_MIN_FILTER
          *value
          {
            type = enum
            enumdata = GL_NEAREST
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MIN_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = -1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_WRAP_R
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_S
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_T
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
        }
      }
    }
  }
  *item
  {
    name = light accumulation: ambient
    clearColor = 1
    clearDepth = 0
    clearStencil = 0
    drawGroups
    {
      *item = full screen rect
    }
    userDefinedFields
    {
    }
    vertexShader = simple.vert
    vertexShaderDefines
    {
    }
    fragmentShader = lightaccumulate.frag
    fragmentShaderDefines
    {
      *item = AMBIENT
    }
    shaderAttributeBindings
    {
      *item = vertexPosition
      *item = vertexNormal
      *item = vertexTangent
      *item = vertexBitangent
      *item = vertexColor
      *item = vertexUv0
      *item = vertexUv1
      *item = vertexUv2
    }
    uniforms
    {
      *key = ambientLightColor
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = modelMatrix
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = projectionMatrix
      *value
      {
        data
        {
          *item = 2.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -2.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = -0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = viewMatrix
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
    }
    stateEnable
    {
    }
    stateDisable
    {
      *item = GL_CULL_FACE
      *item = GL_DEPTH_TEST
      *item = GL_FRAMEBUFFER_SRGB
      *item = GL_POLYGON_OFFSET_FILL
      *item = GL_POLYGON_OFFSET_LINE
      *item = GL_POLYGON_OFFSET_POINT
      *item = GL_SAMPLE_ALPHA_TO_COVERAGE
      *item = GL_SAMPLE_ALPHA_TO_ONE
      *item = GL_SAMPLE_COVERAGE
      *item = GL_SAMPLE_MASK
    }
    stateEnablei
    {
      *item
      {
        *first = GL_BLEND
        *second = 0
      }
    }
    stateDisablei
    {
      *item
      {
        *first = GL_BLEND
        *second = 1
      }
      *item
      {
        *first = GL_BLEND
        *second = 2
      }
      *item
      {
        *first = GL_BLEND
        *second = 3
      }
    }
    stateEnum
    {
      *key = GL_BLEND_DST_ALPHA
      *value
      {
        type = enum
        enumdata = GL_ONE
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_DST_RGB
      *value
      {
        type = enum
        enumdata = GL_ONE
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_EQUATION_ALPHA
      *value
      {
        type = enum
        enumdata = GL_FUNC_ADD
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_EQUATION_RGB
      *value
      {
        type = enum
        enumdata = GL_FUNC_ADD
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_SRC_ALPHA
      *value
      {
        type = enum
        enumdata = GL_ONE
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_SRC_RGB
      *value
      {
        type = enum
        enumdata = GL_ONE
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_CULL_FACE_MODE
      *value
      {
        type = enum
        enumdata = GL_FRONT
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_DEPTH_FUNC
      *value
      {
        type = enum
        enumdata = GL_GREATER
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_DEPTH_WRITEMASK
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 0
        }
        floatdata
        {
        }
      }
      *key = GL_POLYGON_OFFSET_FACTOR
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_COVERAGE_VALUE
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_MASK_VALUE
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 0
        }
        floatdata
        {
        }
      }
    }
    renderTargets
    {
      *key = GL_COLOR_ATTACHMENT0
      *value
      {
        name = light buffer
        variable = outputColor
        format = GL_RGBA16F
        target = GL_TEXTURE_2D
        autoMipmap = 0
        width = 1.00000000000000000000e+00
        height = 1.00000000000000000000e+00
        widthHeightAreMultiples = 1
      }
      *key = GL_DEPTH_ATTACHMENT
      *value
      {
        name = depth copy
        variable = depth
        format = GL_DEPTH_COMPONENT24
        target = GL_TEXTURE_2D
        autoMipmap = 0
        width = 1.00000000000000000000e+00
        height = 1.00000000000000000000e+00
        widthHeightAreMultiples = 1
      }
    }
    samplers
    {
      *key = depthSampler
      *value
      {
        textureName = gbuffer: depth
        state
        {
          *key = GL_TEXTURE_BORDER_COLOR
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_LOD_BIAS
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAG_FILTER
          *value
          {
            type = enum
            enumdata = GL_NEAREST
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MAX_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_MIN_FILTER
          *value
          {
            type = enum
            enumdata = GL_NEAREST
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MIN_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = -1.00000000000000000000e+03
            }
          }
        }
      }
      *key = diffuseAlbedoSampler
      *value
      {
        textureName = gbuffer: diffuse albedo
        state
        {
          *key = GL_TEXTURE_BORDER_COLOR
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_LOD_BIAS
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAG_FILTER
          *value
          {
            type = enum
            enumdata = GL_NEAREST
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MAX_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_MIN_FILTER
          *value
          {
            type = enum
            enumdata = GL_NEAREST
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MIN_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = -1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_WRAP_R
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_S
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_T
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
        }
      }
      *key = materialSampler
      *value
      {
        textureName = gbuffer: material properties
        state
        {
          *key = GL_TEXTURE_BORDER_COLOR
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_LOD_BIAS
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAG_FILTER
          *value
          {
            type = enum
            enumdata = GL_NEAREST
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MAX_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_MIN_FILTER
          *value
          {
            type = enum
            enumdata = GL_NEAREST
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MIN_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = -1.00000000000000000000e+03
            }
          }
        }
      }
      *key = normalSampler
      *value
      {
        textureName = gbuffer: normal xy
        state
        {
          *key = GL_TEXTURE_BORDER_COLOR
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_LOD_BIAS
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAG_FILTER
          *value
          {
            type = enum
            enumdata = GL_NEAREST
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MAX_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_MIN_FILTER
          *value
          {
            type = enum
            enumdata = GL_NEAREST
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MIN_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = -1.00000000000000000000e+03
            }
          }
        }
      }
    }
  }
  *item
  {
    name = light accumulation: directional
    clearColor = 0
    clearDepth = 0
    clearStencil = 0
    drawGroups
    {
      *item = full screen rect
    }
    userDefinedFields
    {
    }
    vertexShader = simple.vert
    vertexShaderDefines
    {
    }
    fragmentShader = lightaccumulate.frag
    fragmentShaderDefines
    {
      *item = DIRECTIONAL
    }
    shaderAttributeBindings
    {
      *item = vertexPosition
      *item = vertexNormal
      *item = vertexTangent
      *item = vertexBitangent
      *item = vertexColor
      *item = vertexUv0
      *item = vertexUv1
      *item = vertexUv2
    }
    uniforms
    {
      *key = directionalLightColor
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = eyespaceLightDirection
      *value
      {
        data
        {
          *item = 3.41039985418319702148e-01
          *item = 1.00000000000000000000e+00
          *item = 3.46821010112762451172e-01
        }
      }
      *key = modelMatrix
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = projectionMatrix
      *value
      {
        data
        {
          *item = 2.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -2.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = -0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = viewMatrix
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
    }
    stateEnable
    {
    }
    stateDisable
    {
      *item = GL_CULL_FACE
      *item = GL_DEPTH_TEST
      *item = GL_FRAMEBUFFER_SRGB
      *item = GL_POLYGON_OFFSET_FILL
      *item = GL_POLYGON_OFFSET_LINE
      *item = GL_POLYGON_OFFSET_POINT
      *item = GL_SAMPLE_ALPHA_TO_COVERAGE
      *item = GL_SAMPLE_ALPHA_TO_ONE
      *item = GL_SAMPLE_COVERAGE
      *item = GL_SAMPLE_MASK
    }
    stateEnablei
    {
      *item
      {
        *first = GL_BLEND
        *second = 0
      }
    }
    stateDisablei
    {
      *item
      {
        *first = GL_BLEND
        *second = 1
      }
      *item
      {
        *first = GL_BLEND
        *second = 2
      }
      *item
      {
        *first = GL_BLEND
        *second = 3
      }
    }
    stateEnum
    {
      *key = GL_BLEND_DST_ALPHA
      *value
      {
        type = enum
        enumdata = GL_ONE
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_DST_RGB
      *value
      {
        type = enum
        enumdata = GL_ONE
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_EQUATION_ALPHA
      *value
      {
        type = enum
        enumdata = GL_FUNC_ADD
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_EQUATION_RGB
      *value
      {
        type = enum
        enumdata = GL_FUNC_ADD
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_SRC_ALPHA
      *value
      {
        type = enum
        enumdata = GL_ONE
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_SRC_RGB
      *value
      {
        type = enum
        enumdata = GL_ONE
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_CULL_FACE_MODE
      *value
      {
        type = enum
        enumdata = GL_FRONT
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_DEPTH_FUNC
      *value
      {
        type = enum
        enumdata = GL_GREATER
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_DEPTH_WRITEMASK
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 0
        }
        floatdata
        {
        }
      }
      *key = GL_POLYGON_OFFSET_FACTOR
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_COVERAGE_VALUE
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_MASK_VALUE
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 0
        }
        floatdata
        {
        }
      }
    }
    renderTargets
    {
      *key = GL_COLOR_ATTACHMENT0
      *value
      {
        name = light buffer
        variable = outputColor
        format = GL_RGBA16F
        target = GL_TEXTURE_2D
        autoMipmap = 0
        width = 1.00000000000000000000e+00
        height = 1.00000000000000000000e+00
        widthHeightAreMultiples = 1
      }
      *key = GL_DEPTH_ATTACHMENT
      *value
      {
        name = depth copy
        variable = depth
        format = GL_DEPTH_COMPONENT24
        target = GL_TEXTURE_2D
        autoMipmap = 0
        width = 1.00000000000000000000e+00
        height = 1.00000000000000000000e+00
        widthHeightAreMultiples = 1
      }
    }
    samplers
    {
      *key = depthSampler
      *value
      {
        textureName = gbuffer: depth
        state
        {
          *key = GL_TEXTURE_BORDER_COLOR
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_LOD_BIAS
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAG_FILTER
          *value
          {
            type = enum
            enumdata = GL_NEAREST
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MAX_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_MIN_FILTER
          *value
          {
            type = enum
            enumdata = GL_NEAREST
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MIN_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = -1.00000000000000000000e+03
            }
          }
        }
      }
      *key = diffuseAlbedoSampler
      *value
      {
        textureName = gbuffer: diffuse albedo
        state
        {
          *key = GL_TEXTURE_BORDER_COLOR
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_LOD_BIAS
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAG_FILTER
          *value
          {
            type = enum
            enumdata = GL_NEAREST
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MAX_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_MIN_FILTER
          *value
          {
            type = enum
            enumdata = GL_NEAREST
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MIN_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = -1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_WRAP_R
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_S
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_T
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
        }
      }
      *key = materialSampler
      *value
      {
        textureName = gbuffer: material properties
        state
        {
          *key = GL_TEXTURE_BORDER_COLOR
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_LOD_BIAS
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAG_FILTER
          *value
          {
            type = enum
            enumdata = GL_NEAREST
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MAX_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_MIN_FILTER
          *value
          {
            type = enum
            enumdata = GL_NEAREST
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MIN_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = -1.00000000000000000000e+03
            }
          }
        }
      }
      *key = normalSampler
      *value
      {
        textureName = gbuffer: normal xy
        state
        {
          *key = GL_TEXTURE_BORDER_COLOR
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_LOD_BIAS
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAG_FILTER
          *value
          {
            type = enum
            enumdata = GL_NEAREST
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MAX_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_MIN_FILTER
          *value
          {
            type = enum
            enumdata = GL_NEAREST
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MIN_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = -1.00000000000000000000e+03
            }
          }
        }
      }
    }
  }
  *item
  {
    name = light accumulation: omni
    clearColor = 0
    clearDepth = 0
    clearStencil = 0
    drawGroups
    {
      *item = lights_omni
    }
    userDefinedFields
    {
      *key = camera
      *value = default
    }
    vertexShader = simple.vert
    vertexShaderDefines
    {
    }
    fragmentShader = lightaccumulate.frag
    fragmentShaderDefines
    {
      *item = OMNI
    }
    shaderAttributeBindings
    {
      *item = vertexPosition
      *item = vertexNormal
      *item = vertexTangent
      *item = vertexBitangent
      *item = vertexColor
      *item = vertexUv0
      *item = vertexUv1
      *item = vertexUv2
    }
    uniforms
    {
      *key = colorTint
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = modelMatrix
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = projectionMatrix
      *value
      {
        data
        {
          *item = 1.87397003173828125000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 2.41421365737915039062e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -1.00200200080871582031e+00
          *item = -1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -2.00200200080871582031e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = viewMatrix
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -5.83815002441406250000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = viewportSize
      *value
      {
        data
        {
          *item = 7.15000000000000000000e+02
          *item = 5.55000000000000000000e+02
        }
      }
    }
    stateEnable
    {
      *item = GL_CULL_FACE
      *item = GL_DEPTH_TEST
    }
    stateDisable
    {
      *item = GL_FRAMEBUFFER_SRGB
      *item = GL_POLYGON_OFFSET_FILL
      *item = GL_POLYGON_OFFSET_LINE
      *item = GL_POLYGON_OFFSET_POINT
      *item = GL_SAMPLE_ALPHA_TO_COVERAGE
      *item = GL_SAMPLE_ALPHA_TO_ONE
      *item = GL_SAMPLE_COVERAGE
      *item = GL_SAMPLE_MASK
    }
    stateEnablei
    {
      *item
      {
        *first = GL_BLEND
        *second = 0
      }
    }
    stateDisablei
    {
      *item
      {
        *first = GL_BLEND
        *second = 1
      }
      *item
      {
        *first = GL_BLEND
        *second = 2
      }
      *item
      {
        *first = GL_BLEND
        *second = 3
      }
    }
    stateEnum
    {
      *key = GL_BLEND_DST_ALPHA
      *value
      {
        type = enum
        enumdata = GL_ONE
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_DST_RGB
      *value
      {
        type = enum
        enumdata = GL_ONE
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_EQUATION_ALPHA
      *value
      {
        type = enum
        enumdata = GL_FUNC_ADD
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_EQUATION_RGB
      *value
      {
        type = enum
        enumdata = GL_FUNC_ADD
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_SRC_ALPHA
      *value
      {
        type = enum
        enumdata = GL_ONE
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_SRC_RGB
      *value
      {
        type = enum
        enumdata = GL_ONE
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_CULL_FACE_MODE
      *value
      {
        type = enum
        enumdata = GL_FRONT
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_DEPTH_FUNC
      *value
      {
        type = enum
        enumdata = GL_GREATER
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_DEPTH_WRITEMASK
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 0
        }
        floatdata
        {
        }
      }
      *key = GL_POLYGON_OFFSET_FACTOR
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_COVERAGE_VALUE
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_MASK_VALUE
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 0
        }
        floatdata
        {
        }
      }
    }
    renderTargets
    {
      *key = GL_COLOR_ATTACHMENT0
      *value
      {
        name = light buffer
        variable = outputColor
        format = GL_RGBA16F
        target = GL_TEXTURE_2D
        autoMipmap = 0
        width = 1.00000000000000000000e+00
        height = 1.00000000000000000000e+00
        widthHeightAreMultiples = 1
      }
      *key = GL_DEPTH_ATTACHMENT
      *value
      {
        name = depth copy
        variable = depth
        format = GL_DEPTH_COMPONENT24
        target = GL_TEXTURE_2D
        autoMipmap = 0
        width = 1.00000000000000000000e+00
        height = 1.00000000000000000000e+00
        widthHeightAreMultiples = 1
      }
    }
    samplers
    {
      *key = depthSampler
      *value
      {
        textureName = gbuffer: depth
        state
        {
          *key = GL_TEXTURE_BORDER_COLOR
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_LOD_BIAS
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAG_FILTER
          *value
          {
            type = enum
            enumdata = GL_NEAREST
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MAX_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_MIN_FILTER
          *value
          {
            type = enum
            enumdata = GL_NEAREST
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MIN_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = -1.00000000000000000000e+03
            }
          }
        }
      }
      *key = diffuseAlbedoSampler
      *value
      {
        textureName = gbuffer: diffuse albedo
        state
        {
          *key = GL_TEXTURE_BORDER_COLOR
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_LOD_BIAS
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAG_FILTER
          *value
          {
            type = enum
            enumdata = GL_NEAREST
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MAX_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_MIN_FILTER
          *value
          {
            type = enum
            enumdata = GL_NEAREST
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MIN_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = -1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_WRAP_R
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_S
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_T
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
        }
      }
      *key = materialSampler
      *value
      {
        textureName = gbuffer: material properties
        state
        {
          *key = GL_TEXTURE_BORDER_COLOR
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_LOD_BIAS
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAG_FILTER
          *value
          {
            type = enum
            enumdata = GL_NEAREST
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MAX_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_MIN_FILTER
          *value
          {
            type = enum
            enumdata = GL_NEAREST
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MIN_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = -1.00000000000000000000e+03
            }
          }
        }
      }
      *key = normalSampler
      *value
      {
        textureName = gbuffer: normal xy
        state
        {
          *key = GL_TEXTURE_BORDER_COLOR
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_LOD_BIAS
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAG_FILTER
          *value
          {
            type = enum
            enumdata = GL_NEAREST
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MAX_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_MIN_FILTER
          *value
          {
            type = enum
            enumdata = GL_NEAREST
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MIN_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = -1.00000000000000000000e+03
            }
          }
        }
      }
    }
  }
  *item
  {
    name = light accumulation: emissive
    clearColor = 0
    clearDepth = 0
    clearStencil = 0
    drawGroups
    {
      *item = lights_emissive
    }
    userDefinedFields
    {
      *key = camera
      *value = default
    }
    vertexShader = simple.vert
    vertexShaderDefines
    {
    }
    fragmentShader = lightaccumulate.frag
    fragmentShaderDefines
    {
      *item = EMISSIVE
    }
    shaderAttributeBindings
    {
      *item = vertexPosition
      *item = vertexNormal
      *item = vertexTangent
      *item = vertexBitangent
      *item = vertexColor
      *item = vertexUv0
      *item = vertexUv1
      *item = vertexUv2
    }
    uniforms
    {
      *key = colorTint
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = modelMatrix
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = projectionMatrix
      *value
      {
        data
        {
          *item = 1.87397003173828125000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 2.41421365737915039062e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -1.00200200080871582031e+00
          *item = -1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -2.00200200080871582031e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = viewMatrix
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -5.83815002441406250000e+00
          *item = 1.00000000000000000000e+00
        }
      }
    }
    stateEnable
    {
      *item = GL_DEPTH_TEST
    }
    stateDisable
    {
      *item = GL_CULL_FACE
      *item = GL_FRAMEBUFFER_SRGB
      *item = GL_POLYGON_OFFSET_FILL
      *item = GL_POLYGON_OFFSET_LINE
      *item = GL_POLYGON_OFFSET_POINT
      *item = GL_SAMPLE_ALPHA_TO_COVERAGE
      *item = GL_SAMPLE_ALPHA_TO_ONE
      *item = GL_SAMPLE_COVERAGE
      *item = GL_SAMPLE_MASK
    }
    stateEnablei
    {
      *item
      {
        *first = GL_BLEND
        *second = 0
      }
    }
    stateDisablei
    {
      *item
      {
        *first = GL_BLEND
        *second = 1
      }
      *item
      {
        *first = GL_BLEND
        *second = 2
      }
      *item
      {
        *first = GL_BLEND
        *second = 3
      }
    }
    stateEnum
    {
      *key = GL_BLEND_DST_ALPHA
      *value
      {
        type = enum
        enumdata = GL_ONE
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_DST_RGB
      *value
      {
        type = enum
        enumdata = GL_ONE
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_EQUATION_ALPHA
      *value
      {
        type = enum
        enumdata = GL_FUNC_ADD
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_EQUATION_RGB
      *value
      {
        type = enum
        enumdata = GL_FUNC_ADD
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_SRC_ALPHA
      *value
      {
        type = enum
        enumdata = GL_ONE
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_SRC_RGB
      *value
      {
        type = enum
        enumdata = GL_ONE
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_CULL_FACE_MODE
      *value
      {
        type = enum
        enumdata = GL_FRONT
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_DEPTH_FUNC
      *value
      {
        type = enum
        enumdata = GL_LEQUAL
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_DEPTH_WRITEMASK
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 0
        }
        floatdata
        {
        }
      }
      *key = GL_POLYGON_OFFSET_FACTOR
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_COVERAGE_VALUE
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_MASK_VALUE
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 0
        }
        floatdata
        {
        }
      }
    }
    renderTargets
    {
      *key = GL_COLOR_ATTACHMENT0
      *value
      {
        name = light buffer
        variable = outputColor
        format = GL_RGBA16F
        target = GL_TEXTURE_2D
        autoMipmap = 0
        width = 1.00000000000000000000e+00
        height = 1.00000000000000000000e+00
        widthHeightAreMultiples = 1
      }
      *key = GL_DEPTH_ATTACHMENT
      *value
      {
        name = depth copy
        variable = depth
        format = GL_DEPTH_COMPONENT24
        target = GL_TEXTURE_2D
        autoMipmap = 0
        width = 1.00000000000000000000e+00
        height = 1.00000000000000000000e+00
        widthHeightAreMultiples = 1
      }
    }
    samplers
    {
      *key = depthSampler
      *value
      {
        textureName = gbuffer: depth
        state
        {
          *key = GL_TEXTURE_BORDER_COLOR
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_LOD_BIAS
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAG_FILTER
          *value
          {
            type = enum
            enumdata = GL_NEAREST
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MAX_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_MIN_FILTER
          *value
          {
            type = enum
            enumdata = GL_NEAREST
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MIN_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = -1.00000000000000000000e+03
            }
          }
        }
      }
      *key = diffuseAlbedoSampler
      *value
      {
        textureName = gbuffer: diffuse albedo
        state
        {
          *key = GL_TEXTURE_BORDER_COLOR
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_LOD_BIAS
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAG_FILTER
          *value
          {
            type = enum
            enumdata = GL_NEAREST
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MAX_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_MIN_FILTER
          *value
          {
            type = enum
            enumdata = GL_NEAREST
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MIN_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = -1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_WRAP_R
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_S
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_T
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
        }
      }
      *key = emissiveSampler
      *value
      {
        textureName = diffuseTexture
        state
        {
          *key = GL_TEXTURE_BORDER_COLOR
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_LOD_BIAS
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAG_FILTER
          *value
          {
            type = enum
            enumdata = GL_LINEAR
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MAX_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_MIN_FILTER
          *value
          {
            type = enum
            enumdata = GL_LINEAR_MIPMAP_LINEAR
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MIN_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = -1.00000000000000000000e+03
            }
          }
        }
      }
      *key = materialSampler
      *value
      {
        textureName = gbuffer: material properties
        state
        {
          *key = GL_TEXTURE_BORDER_COLOR
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_LOD_BIAS
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAG_FILTER
          *value
          {
            type = enum
            enumdata = GL_NEAREST
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MAX_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_MIN_FILTER
          *value
          {
            type = enum
            enumdata = GL_NEAREST
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MIN_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = -1.00000000000000000000e+03
            }
          }
        }
      }
      *key = normalSampler
      *value
      {
        textureName = gbuffer: normal xy
        state
        {
          *key = GL_TEXTURE_BORDER_COLOR
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_LOD_BIAS
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAG_FILTER
          *value
          {
            type = enum
            enumdata = GL_NEAREST
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MAX_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_MIN_FILTER
          *value
          {
            type = enum
            enumdata = GL_NEAREST
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MIN_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = -1.00000000000000000000e+03
            }
          }
        }
      }
    }
  }
  *item
  {
    name = light compositing
    clearColor = 1
    clearDepth = 1
    clearStencil = 1
    drawGroups
    {
      *item = full screen rect
    }
    userDefinedFields
    {
    }
    vertexShader = simple.vert
    vertexShaderDefines
    {
    }
    fragmentShader = lightcompositing.frag
    fragmentShaderDefines
    {
    }
    shaderAttributeBindings
    {
      *item = vertexPosition
      *item = vertexNormal
      *item = vertexTangent
      *item = vertexBitangent
      *item = vertexColor
      *item = vertexUv0
      *item = vertexUv1
      *item = vertexUv2
    }
    uniforms
    {
      *key = modelMatrix
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = projectionMatrix
      *value
      {
        data
        {
          *item = 2.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -2.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = -0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = viewMatrix
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
    }
    stateEnable
    {
      *item = GL_FRAMEBUFFER_SRGB
    }
    stateDisable
    {
      *item = GL_CULL_FACE
      *item = GL_DEPTH_TEST
      *item = GL_POLYGON_OFFSET_FILL
      *item = GL_POLYGON_OFFSET_LINE
      *item = GL_POLYGON_OFFSET_POINT
      *item = GL_SAMPLE_ALPHA_TO_COVERAGE
      *item = GL_SAMPLE_ALPHA_TO_ONE
      *item = GL_SAMPLE_COVERAGE
      *item = GL_SAMPLE_MASK
    }
    stateEnablei
    {
    }
    stateDisablei
    {
      *item
      {
        *first = GL_BLEND
        *second = 0
      }
      *item
      {
        *first = GL_BLEND
        *second = 1
      }
      *item
      {
        *first = GL_BLEND
        *second = 2
      }
      *item
      {
        *first = GL_BLEND
        *second = 3
      }
    }
    stateEnum
    {
      *key = GL_BLEND_DST_ALPHA
      *value
      {
        type = enum
        enumdata = GL_ONE_MINUS_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_DST_RGB
      *value
      {
        type = enum
        enumdata = GL_ONE_MINUS_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_EQUATION_ALPHA
      *value
      {
        type = enum
        enumdata = GL_FUNC_ADD
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_EQUATION_RGB
      *value
      {
        type = enum
        enumdata = GL_FUNC_ADD
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_SRC_ALPHA
      *value
      {
        type = enum
        enumdata = GL_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_SRC_RGB
      *value
      {
        type = enum
        enumdata = GL_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_CULL_FACE_MODE
      *value
      {
        type = enum
        enumdata = GL_FRONT
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_DEPTH_WRITEMASK
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 0
        }
        floatdata
        {
        }
      }
      *key = GL_POLYGON_OFFSET_FACTOR
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_COVERAGE_VALUE
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_MASK_VALUE
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 0
        }
        floatdata
        {
        }
      }
    }
    renderTargets
    {
    }
    samplers
    {
      *key = lightBufferSampler
      *value
      {
        textureName = light buffer
        state
        {
          *key = GL_TEXTURE_BORDER_COLOR
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_LOD_BIAS
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAG_FILTER
          *value
          {
            type = enum
            enumdata = GL_NEAREST
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MAX_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_MIN_FILTER
          *value
          {
            type = enum
            enumdata = GL_NEAREST
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MIN_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = -1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_WRAP_R
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_S
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_T
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
        }
      }
    }
  }
  *item
  {
    name = 2D
    clearColor = 0
    clearDepth = 0
    clearStencil = 0
    drawGroups
    {
      *item = twodim
    }
    userDefinedFields
    {
    }
    vertexShader = simple.vert
    vertexShaderDefines
    {
    }
    fragmentShader = simple.frag
    fragmentShaderDefines
    {
    }
    shaderAttributeBindings
    {
      *item = vertexPosition
      *item = vertexNormal
      *item = vertexTangent
      *item = vertexBitangent
      *item = vertexColor
      *item = vertexUv0
      *item = vertexUv1
      *item = vertexUv2
    }
    uniforms
    {
      *key = colorTint
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = modelMatrix
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = projectionMatrix
      *value
      {
        data
        {
          *item = 2.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -2.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = -0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = viewMatrix
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
    }
    stateEnable
    {
      *item = GL_FRAMEBUFFER_SRGB
    }
    stateDisable
    {
      *item = GL_CULL_FACE
      *item = GL_DEPTH_TEST
      *item = GL_POLYGON_OFFSET_FILL
      *item = GL_POLYGON_OFFSET_LINE
      *item = GL_POLYGON_OFFSET_POINT
      *item = GL_SAMPLE_ALPHA_TO_COVERAGE
      *item = GL_SAMPLE_ALPHA_TO_ONE
      *item = GL_SAMPLE_COVERAGE
      *item = GL_SAMPLE_MASK
    }
    stateEnablei
    {
      *item
      {
        *first = GL_BLEND
        *second = 0
      }
    }
    stateDisablei
    {
      *item
      {
        *first = GL_BLEND
        *second = 1
      }
      *item
      {
        *first = GL_BLEND
        *second = 2
      }
      *item
      {
        *first = GL_BLEND
        *second = 3
      }
    }
    stateEnum
    {
      *key = GL_BLEND_DST_ALPHA
      *value
      {
        type = enum
        enumdata = GL_ONE_MINUS_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_DST_RGB
      *value
      {
        type = enum
        enumdata = GL_ONE_MINUS_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_EQUATION_ALPHA
      *value
      {
        type = enum
        enumdata = GL_FUNC_ADD
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_EQUATION_RGB
      *value
      {
        type = enum
        enumdata = GL_FUNC_ADD
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_SRC_ALPHA
      *value
      {
        type = enum
        enumdata = GL_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_SRC_RGB
      *value
      {
        type = enum
        enumdata = GL_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_DEPTH_WRITEMASK
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 0
        }
        floatdata
        {
        }
      }
      *key = GL_POLYGON_OFFSET_FACTOR
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_COVERAGE_VALUE
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_MASK_VALUE
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 0
        }
        floatdata
        {
        }
      }
    }
    renderTargets
    {
    }
    samplers
    {
      *key = diffuseSampler
      *value
      {
        textureName = diffuseTexture
        state
        {
          *key = GL_TEXTURE_BORDER_COLOR
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_LOD_BIAS
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAG_FILTER
          *value
          {
            type = enum
            enumdata = GL_LINEAR
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MAX_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_MIN_FILTER
          *value
          {
            type = enum
            enumdata = GL_LINEAR_MIPMAP_LINEAR
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MIN_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = -1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_WRAP_R
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_S
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_T
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
        }
      }
    }
  }
  *item
  {
    name = fonts
    clearColor = 0
    clearDepth = 0
    clearStencil = 0
    drawGroups
    {
      *item = text
    }
    userDefinedFields
    {
    }
    vertexShader = simple.vert
    vertexShaderDefines
    {
    }
    fragmentShader = distancefield.frag
    fragmentShaderDefines
    {
    }
    shaderAttributeBindings
    {
      *item = vertexPosition
      *item = vertexNormal
      *item = vertexTangent
      *item = vertexBitangent
      *item = vertexColor
      *item = vertexUv0
      *item = vertexUv1
      *item = vertexUv2
    }
    uniforms
    {
      *key = colorTint
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = modelMatrix
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = projectionMatrix
      *value
      {
        data
        {
          *item = 2.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -2.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = -0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = viewMatrix
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
    }
    stateEnable
    {
      *item = GL_FRAMEBUFFER_SRGB
    }
    stateDisable
    {
      *item = GL_CULL_FACE
      *item = GL_DEPTH_TEST
      *item = GL_POLYGON_OFFSET_FILL
      *item = GL_POLYGON_OFFSET_LINE
      *item = GL_POLYGON_OFFSET_POINT
      *item = GL_SAMPLE_ALPHA_TO_COVERAGE
      *item = GL_SAMPLE_ALPHA_TO_ONE
      *item = GL_SAMPLE_COVERAGE
      *item = GL_SAMPLE_MASK
    }
    stateEnablei
    {
      *item
      {
        *first = GL_BLEND
        *second = 0
      }
    }
    stateDisablei
    {
      *item
      {
        *first = GL_BLEND
        *second = 1
      }
      *item
      {
        *first = GL_BLEND
        *second = 2
      }
      *item
      {
        *first = GL_BLEND
        *second = 3
      }
    }
    stateEnum
    {
      *key = GL_BLEND_DST_ALPHA
      *value
      {
        type = enum
        enumdata = GL_ONE_MINUS_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_DST_RGB
      *value
      {
        type = enum
        enumdata = GL_ONE_MINUS_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_EQUATION_ALPHA
      *value
      {
        type = enum
        enumdata = GL_FUNC_ADD
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_EQUATION_RGB
      *value
      {
        type = enum
        enumdata = GL_FUNC_ADD
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_SRC_ALPHA
      *value
      {
        type = enum
        enumdata = GL_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_SRC_RGB
      *value
      {
        type = enum
        enumdata = GL_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_DEPTH_WRITEMASK
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 0
        }
        floatdata
        {
        }
      }
      *key = GL_POLYGON_OFFSET_FACTOR
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_COVERAGE_VALUE
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_MASK_VALUE
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 0
        }
        floatdata
        {
        }
      }
    }
    renderTargets
    {
    }
    samplers
    {
      *key = diffuseSampler
      *value
      {
        textureName = diffuseTexture
        state
        {
          *key = GL_TEXTURE_BORDER_COLOR
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_LOD_BIAS
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAG_FILTER
          *value
          {
            type = enum
            enumdata = GL_LINEAR
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MAX_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_MIN_FILTER
          *value
          {
            type = enum
            enumdata = GL_LINEAR_MIPMAP_LINEAR
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MIN_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = -1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_WRAP_R
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_S
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_T
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
        }
      }
    }
  }
  *item
  {
    name = visualizer
    clearColor = 1
    clearDepth = 1
    clearStencil = 1
    drawGroups
    {
      *item = full screen rect
    }
    userDefinedFields
    {
      *key = conditions
      *value = never
    }
    vertexShader = simple.vert
    vertexShaderDefines
    {
    }
    fragmentShader = simple.frag
    fragmentShaderDefines
    {
    }
    shaderAttributeBindings
    {
      *item = vertexPosition
      *item = vertexNormal
      *item = vertexTangent
      *item = vertexBitangent
      *item = vertexColor
      *item = vertexUv0
      *item = vertexUv1
      *item = vertexUv2
    }
    uniforms
    {
      *key = colorTint
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = modelMatrix
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = projectionMatrix
      *value
      {
        data
        {
          *item = 2.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -2.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = -0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = viewMatrix
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
    }
    stateEnable
    {
    }
    stateDisable
    {
      *item = GL_CULL_FACE
      *item = GL_DEPTH_TEST
      *item = GL_FRAMEBUFFER_SRGB
      *item = GL_POLYGON_OFFSET_FILL
      *item = GL_POLYGON_OFFSET_LINE
      *item = GL_POLYGON_OFFSET_POINT
      *item = GL_SAMPLE_ALPHA_TO_COVERAGE
      *item = GL_SAMPLE_ALPHA_TO_ONE
      *item = GL_SAMPLE_COVERAGE
      *item = GL_SAMPLE_MASK
    }
    stateEnablei
    {
    }
    stateDisablei
    {
      *item
      {
        *first = GL_BLEND
        *second = 0
      }
      *item
      {
        *first = GL_BLEND
        *second = 1
      }
      *item
      {
        *first = GL_BLEND
        *second = 2
      }
      *item
      {
        *first = GL_BLEND
        *second = 3
      }
    }
    stateEnum
    {
      *key = GL_BLEND_DST_ALPHA
      *value
      {
        type = enum
        enumdata = GL_ONE_MINUS_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_DST_RGB
      *value
      {
        type = enum
        enumdata = GL_ONE_MINUS_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_EQUATION_ALPHA
      *value
      {
        type = enum
        enumdata = GL_FUNC_ADD
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_EQUATION_RGB
      *value
      {
        type = enum
        enumdata = GL_FUNC_ADD
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_SRC_ALPHA
      *value
      {
        type = enum
        enumdata = GL_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_SRC_RGB
      *value
      {
        type = enum
        enumdata = GL_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_DEPTH_WRITEMASK
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 0
        }
        floatdata
        {
        }
      }
      *key = GL_POLYGON_OFFSET_FACTOR
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_COVERAGE_VALUE
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_MASK_VALUE
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 0
        }
        floatdata
        {
        }
      }
    }
    renderTargets
    {
    }
    samplers
    {
      *key = diffuseSampler
      *value
      {
        textureName = gbuffer: diffuse albedo
        state
        {
          *key = GL_TEXTURE_BORDER_COLOR
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_LOD_BIAS
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAG_FILTER
          *value
          {
            type = enum
            enumdata = GL_LINEAR
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MAX_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_MIN_FILTER
          *value
          {
            type = enum
            enumdata = GL_LINEAR
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MIN_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = -1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_WRAP_R
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_S
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_T
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
        }
      }
    }
  }
}
